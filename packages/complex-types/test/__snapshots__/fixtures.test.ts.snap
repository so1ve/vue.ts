// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > __fixtures__/defineEmits/basic.vue 1`] = `
"<script setup lang="ts">
import type { Events } from "./basic-ts";

defineEmits(["foo", "baz", "qux", "quote\\""]);
</script>
"
`;

exports[`fixtures > __fixtures__/defineEmits/core#9541.vue 1`] = `
"<script setup lang="ts">
interface Base {
	(e: "change", id: number): void;
}
interface Emits extends Base {
	(e: "unChange", id: number): void;
}
const emit = defineEmits(["unChange", "change"]);

emit("change", 1);
</script>
"
`;

exports[`fixtures > __fixtures__/defineEmits/shorthand.vue 1`] = `
"<script setup lang="ts">
import type { Events } from "./shorthand-ts";

defineEmits(["foo", "bar", "quotes\\""]);
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/basic.vue 1`] = `
"<script
	setup
	lang="ts"
	generic="T extends string, U extends (string | number)[], I"
>
import type { SomeInterface } from "./basic-ts";

defineProps<
	{
string: string
optionalString?: string
stringUnion: "a" | "b"
genericExtendsString: string
array: string[]
genericArray: (string | number)[]
function: () => void
error: Error
} & SomeInterface & {
"1-1": string
"2-1": string
} & {
"1-1"?: "1-1OptionalMappedType" | undefined
"2-1"?: "2-1OptionalMappedType" | undefined
}
>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/core#8286.vue 1`] = `
"<script setup lang="ts">
import { ButtonHTMLAttributes } from "vue";

interface MyButtonProps extends ButtonHTMLAttributes {}

defineProps<& ButtonHTMLAttributes>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/core#8468.vue 1`] = `
"<script setup lang="ts" generic="P extends Inputs">
import type { Inputs } from "./core#8468-props.ts";

defineProps<Inputs>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/import-from-vue.vue 1`] = `
"<script setup lang="ts" generic="T extends string">
import type { Foo } from "./import-from-vue-vue.exclude.vue";

defineProps<Foo>();
</script>
"
`;
