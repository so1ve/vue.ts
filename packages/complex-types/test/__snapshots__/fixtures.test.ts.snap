// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > __fixtures__/defineEmits/basic.vue 1`] = `
"<script setup lang="ts">
import type { Events } from "./basic-ts";

defineEmits(["foo", "baz", "qux", "quote\\""]);
</script>
"
`;

exports[`fixtures > __fixtures__/defineEmits/core#9541.vue 1`] = `
"<script setup lang="ts">
interface Base {
	(e: "change", id: number): void;
}
interface Emits extends Base {
	(e: "unChange", id: number): void;
}
const emit = defineEmits(["unChange", "change"]);

emit("change", 1);
</script>
"
`;

exports[`fixtures > __fixtures__/defineEmits/shorthand.vue 1`] = `
"<script setup lang="ts">
import type { Events } from "./shorthand-ts";

defineEmits(["foo", "bar", "quotes\\""]);
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/basic.vue 1`] = `
"<script
	setup
	lang="ts"
	generic="T extends string, U extends (string | number)[], I"
>
import type { SomeInterface } from "./basic-ts";

defineProps<
	{
"string": string,
"optionalString"?: string,
"stringUnion": string,
"genericExtendsString": string,
"array": string[],
"genericArray": (string | number)[],
"genericCondition": string | number,
"function": Function,
"error": object,
"null": null | string,
} & {
"emptyInterface": object,
"conditionalNumber": number,
"interface": object,
"typeLiteral": object,
} & {
"1-1": string,
"1-2": string,
} & {
"2-1"?: string,
"2-2"?: string,
}
>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/core#8286.vue 1`] = `
"<script setup lang="ts">
import { ButtonHTMLAttributes } from "vue";

interface MyButtonProps extends ButtonHTMLAttributes {}

defineProps<{
"autofocus"?: boolean | string,
"disabled"?: boolean | string,
"form"?: string,
"formaction"?: string,
"formenctype"?: string,
"formmethod"?: string,
"formnovalidate"?: boolean | string,
"formtarget"?: string,
"name"?: string,
"type"?: string,
"value"?: string | number | readonly string[],
"innerHTML"?: string,
"class": any,
"style"?: null | string | boolean | object | StyleValue[],
"accesskey"?: string,
"contenteditable"?: boolean | string,
"contextmenu"?: string,
"dir"?: string,
"draggable"?: boolean | string,
"hidden"?: boolean | string,
"id"?: string,
"inert"?: boolean | string,
"lang"?: string,
"placeholder"?: string,
"spellcheck"?: boolean | string,
"tabindex"?: string | number,
"title"?: string,
"translate"?: string,
"radiogroup"?: string,
"role"?: string,
"about"?: string,
"datatype"?: string,
"inlist": any,
"prefix"?: string,
"property"?: string,
"resource"?: string,
"typeof"?: string,
"vocab"?: string,
"autocapitalize"?: string,
"autocorrect"?: string,
"autosave"?: string,
"color"?: string,
"itemprop"?: string,
"itemscope"?: boolean | string,
"itemtype"?: string,
"itemid"?: string,
"itemref"?: string,
"results"?: string | number,
"security"?: string,
"unselectable"?: string,
"inputmode"?: string,
"is"?: string,
"aria-activedescendant"?: string,
"aria-atomic"?: boolean | string,
"aria-autocomplete"?: string,
"aria-busy"?: boolean | string,
"aria-checked"?: boolean | string,
"aria-colcount"?: string | number,
"aria-colindex"?: string | number,
"aria-colspan"?: string | number,
"aria-controls"?: string,
"aria-current"?: boolean | string,
"aria-describedby"?: string,
"aria-details"?: string,
"aria-disabled"?: boolean | string,
"aria-dropeffect"?: string,
"aria-errormessage"?: string,
"aria-expanded"?: boolean | string,
"aria-flowto"?: string,
"aria-grabbed"?: boolean | string,
"aria-haspopup"?: boolean | string,
"aria-hidden"?: boolean | string,
"aria-invalid"?: boolean | string,
"aria-keyshortcuts"?: string,
"aria-label"?: string,
"aria-labelledby"?: string,
"aria-level"?: string | number,
"aria-live"?: string,
"aria-modal"?: boolean | string,
"aria-multiline"?: boolean | string,
"aria-multiselectable"?: boolean | string,
"aria-orientation"?: string,
"aria-owns"?: string,
"aria-placeholder"?: string,
"aria-posinset"?: string | number,
"aria-pressed"?: boolean | string,
"aria-readonly"?: boolean | string,
"aria-relevant"?: string,
"aria-required"?: boolean | string,
"aria-roledescription"?: string,
"aria-rowcount"?: string | number,
"aria-rowindex"?: string | number,
"aria-rowspan"?: string | number,
"aria-selected"?: boolean | string,
"aria-setsize"?: string | number,
"aria-sort"?: string,
"aria-valuemax"?: string | number,
"aria-valuemin"?: string | number,
"aria-valuenow"?: string | number,
"aria-valuetext"?: string,
"onCopy": any,
"onCut": any,
"onPaste": any,
"onCompositionend": any,
"onCompositionstart": any,
"onCompositionupdate": any,
"onDrag": any,
"onDragend": any,
"onDragenter": any,
"onDragexit": any,
"onDragleave": any,
"onDragover": any,
"onDragstart": any,
"onDrop": any,
"onFocus": any,
"onFocusin": any,
"onFocusout": any,
"onBlur": any,
"onChange": any,
"onBeforeinput": any,
"onInput": any,
"onReset": any,
"onSubmit": any,
"onInvalid": any,
"onLoad": any,
"onError": any,
"onKeydown": any,
"onKeypress": any,
"onKeyup": any,
"onAuxclick": any,
"onClick": any,
"onContextmenu": any,
"onDblclick": any,
"onMousedown": any,
"onMouseenter": any,
"onMouseleave": any,
"onMousemove": any,
"onMouseout": any,
"onMouseover": any,
"onMouseup": any,
"onAbort": any,
"onCanplay": any,
"onCanplaythrough": any,
"onDurationchange": any,
"onEmptied": any,
"onEncrypted": any,
"onEnded": any,
"onLoadeddata": any,
"onLoadedmetadata": any,
"onLoadstart": any,
"onPause": any,
"onPlay": any,
"onPlaying": any,
"onProgress": any,
"onRatechange": any,
"onSeeked": any,
"onSeeking": any,
"onStalled": any,
"onSuspend": any,
"onTimeupdate": any,
"onVolumechange": any,
"onWaiting": any,
"onSelect": any,
"onScroll": any,
"onScrollend": any,
"onTouchcancel": any,
"onTouchend": any,
"onTouchmove": any,
"onTouchstart": any,
"onPointerdown": any,
"onPointermove": any,
"onPointerup": any,
"onPointercancel": any,
"onPointerenter": any,
"onPointerleave": any,
"onPointerover": any,
"onPointerout": any,
"onWheel": any,
"onAnimationstart": any,
"onAnimationend": any,
"onAnimationiteration": any,
"onTransitionend": any,
"onTransitionstart": any,
}>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/core#8468.vue 1`] = `
"<script setup lang="ts" generic="P extends Inputs">
import type { Inputs } from "./core#8468-props.ts";

defineProps<{
"type": string,
"value": string,
} | {
"type": string,
"value": number,
}>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/core#9774.vue 1`] = `
"<script setup lang="ts">
import type { ExtractPropTypes } from "vue";
const testProps = {
	a: {
		type: String,
	},
};

type TestProps = ExtractPropTypes<typeof testProps>;
defineProps<{
"a"?: string,
}>();
</script>
"
`;

exports[`fixtures > __fixtures__/defineProps/import-from-vue.vue 1`] = `
"<script setup lang="ts" generic="T extends string">
import type { Foo } from "./import-from-vue-vue.exclude.vue";

defineProps<{
"foo": string,
}>();
</script>
"
`;
